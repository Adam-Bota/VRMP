rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Allow users to read and write their own documents only
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow creating a user document if it doesn't exist with role 'user'
      allow create: if request.auth != null && request.resource.data.keys().hasAll(['role']) && request.resource.data.role == 'user' && !exists(/databases/$(database)/documents/users/$(request.auth.uid));
      
      // Allow admins to read all user documents (you can implement this when you have admin roles)
      // allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Sessions collection rules
    match /sessions/{sessionId} {
      // Allow anyone to read sessions
      allow read: if true;
      
      // Allow session creation if:
      // - All required fields are present
      // - Timestamps are valid
      // - User is authenticated
      allow create: if
        request.auth != null &&
        request.resource.data.keys().hasAll(['videoId', 'createdBy']) &&
        request.resource.data.videoId is string
              
      // Allow updates to join a session (adding to participants array)
      allow update: if 
        request.auth != null &&
        // Only allow updating the participants field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) &&
        // Ensure other fields aren't modified
        request.resource.data.title == resource.data.title &&
        request.resource.data.videoId == resource.data.videoId &&
        request.resource.data.startTime == resource.data.startTime &&
        request.resource.data.endTime == resource.data.endTime &&
        // Make sure we're only adding the current user to participants
        request.resource.data.participants.hasAll(resource.data.participants) &&
        request.resource.data.participants.hasOnly(resource.data.participants.concat([request.auth.uid]));
      
      // Only session creator can delete the session
      allow delete: if 
        request.auth != null &&
        resource.data.createdBy == request.auth.uid;
    }
    
    // Videos collection rules
    match /videos/{videoId} {
      // Allow anyone to read video documents
      allow read: if true;
      
      // Allow creation of video documents by authenticated users
      allow write: if request.auth != null;
      
    }

    // Add rules for metadata collection
    match /metadata/{docId} {
      // Allow authenticated users to update metadata documents
      allow update: if request.auth != null;
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
